{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { getMenuList, getHotDishes } from '@/api/menu';\nimport { useAuthStore } from './auth';\nexport const useMenuStore = defineStore('menu', {\n  state: () => ({\n    menuList: [],\n    hotDishes: [],\n    loading: false,\n    error: null\n  }),\n  actions: {\n    async fetchMenuList() {\n      this.loading = true;\n      try {\n        const response = await getMenuList();\n        this.menuList = response.data;\n      } catch (error) {\n        this.error = error;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async fetchHotDishes(startTime, endTime) {\n      this.loading = true;\n      this.error = null;\n      try {\n        const authStore = useAuthStore();\n        if (!authStore.token) {\n          throw new Error('请先登录');\n        }\n\n        // 确保时间格式为 yyyy-MM-dd（只有日期，没有时分秒）\n        const formatDate = date => {\n          if (typeof date === 'string') {\n            return date.split(' ')[0]; // 只取日期部分\n          }\n          return date;\n        };\n        const formattedStartTime = formatDate(startTime);\n        const formattedEndTime = formatDate(endTime);\n        const response = await getHotDishes(formattedStartTime, formattedEndTime);\n        this.hotDishes = response.data || [];\n      } catch (error) {\n        this.error = error;\n        this.hotDishes = [];\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineStore","getMenuList","getHotDishes","useAuthStore","useMenuStore","state","menuList","hotDishes","loading","error","actions","fetchMenuList","response","data","fetchHotDishes","startTime","endTime","authStore","token","Error","formatDate","date","split","formattedStartTime","formattedEndTime"],"sources":["D:/数据库课程设计（饭店系统）/restaurant-ordering-system/src/stores/menu.js"],"sourcesContent":["import { defineStore } from 'pinia';\r\nimport { getMenuList, getHotDishes } from '@/api/menu';\r\nimport { useAuthStore } from './auth';\r\n\r\nexport const useMenuStore = defineStore('menu', {\r\n    state: () => ({\r\n        menuList: [],\r\n        hotDishes: [],\r\n        loading: false,\r\n        error: null\r\n    }),\r\n    actions: {\r\n        async fetchMenuList() {\r\n            this.loading = true;\r\n            try {\r\n                const response = await getMenuList();\r\n                this.menuList = response.data;\r\n            } catch (error) {\r\n                this.error = error;\r\n            } finally {\r\n                this.loading = false;\r\n            }\r\n        },\r\n        async fetchHotDishes(startTime, endTime) {\r\n            this.loading = true;\r\n            this.error = null;\r\n            try {\r\n                const authStore = useAuthStore();\r\n                if (!authStore.token) {\r\n                    throw new Error('请先登录');\r\n                }\r\n                \r\n                // 确保时间格式为 yyyy-MM-dd（只有日期，没有时分秒）\r\n                const formatDate = (date) => {\r\n                    if (typeof date === 'string') {\r\n                        return date.split(' ')[0]; // 只取日期部分\r\n                    }\r\n                    return date;\r\n                };\r\n                \r\n                const formattedStartTime = formatDate(startTime);\r\n                const formattedEndTime = formatDate(endTime);\r\n                \r\n                const response = await getHotDishes(formattedStartTime, formattedEndTime);\r\n                this.hotDishes = response.data || [];\r\n            } catch (error) {\r\n                this.error = error;\r\n                this.hotDishes = [];\r\n            } finally {\r\n                this.loading = false;\r\n            }\r\n        }\r\n    }\r\n});\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,YAAY,QAAQ,YAAY;AACtD,SAASC,YAAY,QAAQ,QAAQ;AAErC,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAAC,MAAM,EAAE;EAC5CK,KAAK,EAAEA,CAAA,MAAO;IACVC,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACX,CAAC,CAAC;EACFC,OAAO,EAAE;IACL,MAAMC,aAAaA,CAAA,EAAG;MAClB,IAAI,CAACH,OAAO,GAAG,IAAI;MACnB,IAAI;QACA,MAAMI,QAAQ,GAAG,MAAMX,WAAW,CAAC,CAAC;QACpC,IAAI,CAACK,QAAQ,GAAGM,QAAQ,CAACC,IAAI;MACjC,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACZ,IAAI,CAACA,KAAK,GAAGA,KAAK;MACtB,CAAC,SAAS;QACN,IAAI,CAACD,OAAO,GAAG,KAAK;MACxB;IACJ,CAAC;IACD,MAAMM,cAAcA,CAACC,SAAS,EAAEC,OAAO,EAAE;MACrC,IAAI,CAACR,OAAO,GAAG,IAAI;MACnB,IAAI,CAACC,KAAK,GAAG,IAAI;MACjB,IAAI;QACA,MAAMQ,SAAS,GAAGd,YAAY,CAAC,CAAC;QAChC,IAAI,CAACc,SAAS,CAACC,KAAK,EAAE;UAClB,MAAM,IAAIC,KAAK,CAAC,MAAM,CAAC;QAC3B;;QAEA;QACA,MAAMC,UAAU,GAAIC,IAAI,IAAK;UACzB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;YAC1B,OAAOA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC/B;UACA,OAAOD,IAAI;QACf,CAAC;QAED,MAAME,kBAAkB,GAAGH,UAAU,CAACL,SAAS,CAAC;QAChD,MAAMS,gBAAgB,GAAGJ,UAAU,CAACJ,OAAO,CAAC;QAE5C,MAAMJ,QAAQ,GAAG,MAAMV,YAAY,CAACqB,kBAAkB,EAAEC,gBAAgB,CAAC;QACzE,IAAI,CAACjB,SAAS,GAAGK,QAAQ,CAACC,IAAI,IAAI,EAAE;MACxC,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACZ,IAAI,CAACA,KAAK,GAAGA,KAAK;QAClB,IAAI,CAACF,SAAS,GAAG,EAAE;MACvB,CAAC,SAAS;QACN,IAAI,CAACC,OAAO,GAAG,KAAK;MACxB;IACJ;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}