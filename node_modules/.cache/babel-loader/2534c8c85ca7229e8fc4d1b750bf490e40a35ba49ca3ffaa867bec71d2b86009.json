{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { useCustomerStore } from '@/stores/customer';\nimport CustomerUpdateCard from './CustomerUpdateCard.vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport CustomerAddCard from './CustomerAddCard.vue';\nexport default {\n  components: {\n    CustomerUpdateCard,\n    CustomerAddCard\n  },\n  name: 'CustomerForm',\n  data() {\n    return {\n      customerStore: useCustomerStore(),\n      customerList: [],\n      updateDialogVisible: false,\n      currentCustomer: null,\n      addCustomerDialogVisible: false\n    };\n  },\n  mounted() {\n    this.getCustomerList();\n  },\n  methods: {\n    async getCustomerList() {\n      await this.customerStore.fetchCustomerList();\n      this.customerList = this.customerStore.customerList.filter(customer => {\n        return customer.customerId < 100000000;\n      });\n      ElMessage.success('刷新VIP顾客列表成功');\n    },\n    addCustomer() {\n      this.addCustomerDialogVisible = true;\n    },\n    handleDelete(row) {\n      ElMessageBox.confirm('确定删除该顾客吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.customerStore.deleteCustomer(row.phone);\n        ElMessage.success('删除顾客成功');\n      }).catch(() => {\n        ElMessage.info('取消删除');\n      });\n    },\n    handleUpdate(row) {\n      this.updateDialogVisible = true;\n      this.currentCustomer = {\n        customerId: row.customerId,\n        // Map customerId → id\n        name: row.name,\n        // Map customerName → name\n        phone: row.phone // Map customerPhone → phone\n      };\n    },\n    handleUpdateSuccess() {\n      this.updateDialogVisible = false;\n      this.customerStore.fetchCustomerList();\n      // 重新筛选数据\n      this.customerList = this.customerStore.customerList.filter(customer => {\n        return customer.customerId < 100000000;\n      });\n      this.currentCustomer = null;\n    },\n    handleAddSuccess() {\n      ElMessage.success(\"添加成功\");\n      this.addCustomerDialogVisible = false;\n      this.customerStore.fetchCustomerList();\n      this.customerList = this.customerStore.customerList.filter(customer => {\n        return customer.customerId < 100000000;\n      });\n    }\n  }\n};","map":{"version":3,"names":["useCustomerStore","CustomerUpdateCard","ElMessage","ElMessageBox","CustomerAddCard","components","name","data","customerStore","customerList","updateDialogVisible","currentCustomer","addCustomerDialogVisible","mounted","getCustomerList","methods","fetchCustomerList","filter","customer","customerId","success","addCustomer","handleDelete","row","confirm","confirmButtonText","cancelButtonText","type","then","deleteCustomer","phone","catch","info","handleUpdate","handleUpdateSuccess","handleAddSuccess"],"sources":["D:\\数据库课程设计（饭店系统）\\restaurant-ordering-system\\src\\components\\customer\\CustomerForm.vue"],"sourcesContent":["<template>\r\n    <div class=\"vip-customer-form\">\r\n        <div class=\"vip-customer-form-title mt-7\">\r\n            <div class=\"flex justify-between items-center\">\r\n                <h1 class=\"m-0 text-gray-800 text-xl font-bold\">顾客信息</h1>\r\n                <div>\r\n                    <el-button type=\"primary\" @click=\"getCustomerList\">刷新顾客列表</el-button>\r\n                    <el-button type=\"primary\" @click=\"addCustomer\">添加顾客</el-button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <el-table :data=\"customerList\" style=\"width: 100%; margin-top: 1rem\" stripe border>\r\n            <!--这里给table添加一个margin-top: 1rem-->\r\n            <el-table-column prop=\"customerId\"   label=\"顾客ID\" />\r\n            <el-table-column prop=\"name\" label=\"顾客姓名\" />\r\n            <el-table-column prop=\"phone\" label=\"顾客电话\" />\r\n            <el-table-column prop=\"createTime\" label=\"顾客创建账号时间\" />\r\n\r\n            <el-table-column label=\"操作\">\r\n                <template #default=\"scope\">\r\n                    <el-button type=\"primary\" @click=\"handleUpdate(scope.row)\">更新</el-button>\r\n                    <el-button type=\"danger\" @click=\"handleDelete(scope.row)\">删除</el-button>\r\n                </template>\r\n            </el-table-column>\r\n        </el-table>\r\n        \r\n        <el-dialog v-model=\"updateDialogVisible\" title=\"更新顾客\" width=\"500px\">\r\n            <CustomerUpdateCard v-if=\"currentCustomer\" :customer=\"currentCustomer\" @update-success=\"handleUpdateSuccess\" @close=\"updateDialogVisible = false\" />\r\n        </el-dialog>\r\n        <el-dialog v-model=\"addCustomerDialogVisible\" title=\"添加顾客\" width=\"500px\">\r\n            <CustomerAddCard v-if=\"addCustomerDialogVisible\" @add-success=\"handleAddSuccess\" @close=\"addCustomerDialogVisible = false\" />\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { useCustomerStore } from '@/stores/customer';\r\nimport CustomerUpdateCard from './CustomerUpdateCard.vue';\r\nimport { ElMessage, ElMessageBox } from 'element-plus';\r\nimport CustomerAddCard from './CustomerAddCard.vue';\r\nexport default {\r\n    components: {\r\n        CustomerUpdateCard,\r\n        CustomerAddCard\r\n    },\r\n    name: 'CustomerForm',\r\n    data() {\r\n        return {\r\n            customerStore: useCustomerStore(),\r\n            customerList: [],\r\n            updateDialogVisible: false,\r\n            currentCustomer: null,\r\n            addCustomerDialogVisible: false\r\n        }\r\n    },\r\n    mounted() {\r\n        this.getCustomerList()  \r\n    },\r\n    methods: {\r\n        async getCustomerList() {\r\n            await this.customerStore.fetchCustomerList();\r\n            this.customerList = this.customerStore.customerList.filter(customer => {\r\n                \r\n                return customer.customerId<100000000;\r\n            });\r\n            ElMessage.success('刷新VIP顾客列表成功');\r\n        },\r\n        addCustomer() {\r\n            this.addCustomerDialogVisible = true;\r\n        },\r\n        handleDelete(row) {\r\n            ElMessageBox.confirm('确定删除该顾客吗？', '提示', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning',\r\n            }).then(() => {\r\n                this.customerStore.deleteCustomer(row.phone);   \r\n                ElMessage.success('删除顾客成功');\r\n            })\r\n            .catch(() => {\r\n                ElMessage.info('取消删除');\r\n            });\r\n            \r\n        },\r\n        handleUpdate(row) {\r\n            this.updateDialogVisible = true;\r\n            this.currentCustomer = {\r\n                customerId: row.customerId,    // Map customerId → id\r\n                name: row.name, // Map customerName → name\r\n                phone: row.phone // Map customerPhone → phone\r\n            };\r\n        },\r\n        handleUpdateSuccess() {\r\n            this.updateDialogVisible = false;\r\n            this.customerStore.fetchCustomerList();\r\n            // 重新筛选数据\r\n            this.customerList = this.customerStore.customerList.filter(customer => {\r\n                return customer.customerId<100000000;\r\n            });\r\n            this.currentCustomer = null;\r\n        },\r\n        handleAddSuccess() {\r\n            ElMessage.success(\"添加成功\");\r\n            this.addCustomerDialogVisible = false;\r\n            this.customerStore.fetchCustomerList();\r\n            this.customerList = this.customerStore.customerList.filter(customer => {\r\n                return customer.customerId<100000000;\r\n            });\r\n        }\r\n    },\r\n    \r\n}\r\n</script>"],"mappings":";;AAmCA,SAASA,gBAAe,QAAS,mBAAmB;AACpD,OAAOC,kBAAiB,MAAO,0BAA0B;AACzD,SAASC,SAAS,EAAEC,YAAW,QAAS,cAAc;AACtD,OAAOC,eAAc,MAAO,uBAAuB;AACnD,eAAe;EACXC,UAAU,EAAE;IACRJ,kBAAkB;IAClBG;EACJ,CAAC;EACDE,IAAI,EAAE,cAAc;EACpBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,aAAa,EAAER,gBAAgB,CAAC,CAAC;MACjCS,YAAY,EAAE,EAAE;MAChBC,mBAAmB,EAAE,KAAK;MAC1BC,eAAe,EAAE,IAAI;MACrBC,wBAAwB,EAAE;IAC9B;EACJ,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,eAAe,CAAC;EACzB,CAAC;EACDC,OAAO,EAAE;IACL,MAAMD,eAAeA,CAAA,EAAG;MACpB,MAAM,IAAI,CAACN,aAAa,CAACQ,iBAAiB,CAAC,CAAC;MAC5C,IAAI,CAACP,YAAW,GAAI,IAAI,CAACD,aAAa,CAACC,YAAY,CAACQ,MAAM,CAACC,QAAO,IAAK;QAEnE,OAAOA,QAAQ,CAACC,UAAU,GAAC,SAAS;MACxC,CAAC,CAAC;MACFjB,SAAS,CAACkB,OAAO,CAAC,aAAa,CAAC;IACpC,CAAC;IACDC,WAAWA,CAAA,EAAG;MACV,IAAI,CAACT,wBAAuB,GAAI,IAAI;IACxC,CAAC;IACDU,YAAYA,CAACC,GAAG,EAAE;MACdpB,YAAY,CAACqB,OAAO,CAAC,WAAW,EAAE,IAAI,EAAE;QACpCC,iBAAiB,EAAE,IAAI;QACvBC,gBAAgB,EAAE,IAAI;QACtBC,IAAI,EAAE;MACV,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;QACV,IAAI,CAACpB,aAAa,CAACqB,cAAc,CAACN,GAAG,CAACO,KAAK,CAAC;QAC5C5B,SAAS,CAACkB,OAAO,CAAC,QAAQ,CAAC;MAC/B,CAAC,EACAW,KAAK,CAAC,MAAM;QACT7B,SAAS,CAAC8B,IAAI,CAAC,MAAM,CAAC;MAC1B,CAAC,CAAC;IAEN,CAAC;IACDC,YAAYA,CAACV,GAAG,EAAE;MACd,IAAI,CAACb,mBAAkB,GAAI,IAAI;MAC/B,IAAI,CAACC,eAAc,GAAI;QACnBQ,UAAU,EAAEI,GAAG,CAACJ,UAAU;QAAK;QAC/Bb,IAAI,EAAEiB,GAAG,CAACjB,IAAI;QAAE;QAChBwB,KAAK,EAAEP,GAAG,CAACO,KAAI,CAAE;MACrB,CAAC;IACL,CAAC;IACDI,mBAAmBA,CAAA,EAAG;MAClB,IAAI,CAACxB,mBAAkB,GAAI,KAAK;MAChC,IAAI,CAACF,aAAa,CAACQ,iBAAiB,CAAC,CAAC;MACtC;MACA,IAAI,CAACP,YAAW,GAAI,IAAI,CAACD,aAAa,CAACC,YAAY,CAACQ,MAAM,CAACC,QAAO,IAAK;QACnE,OAAOA,QAAQ,CAACC,UAAU,GAAC,SAAS;MACxC,CAAC,CAAC;MACF,IAAI,CAACR,eAAc,GAAI,IAAI;IAC/B,CAAC;IACDwB,gBAAgBA,CAAA,EAAG;MACfjC,SAAS,CAACkB,OAAO,CAAC,MAAM,CAAC;MACzB,IAAI,CAACR,wBAAuB,GAAI,KAAK;MACrC,IAAI,CAACJ,aAAa,CAACQ,iBAAiB,CAAC,CAAC;MACtC,IAAI,CAACP,YAAW,GAAI,IAAI,CAACD,aAAa,CAACC,YAAY,CAACQ,MAAM,CAACC,QAAO,IAAK;QACnE,OAAOA,QAAQ,CAACC,UAAU,GAAC,SAAS;MACxC,CAAC,CAAC;IACN;EACJ;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}