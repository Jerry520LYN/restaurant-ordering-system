{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, onMounted, watch } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport { getMenuList } from '@/api/menu';\nimport { createOrder, addDishToOrder, removeDishFromOrder, updateDishQuantity, getOrderIdWithDishId, checkoutOrder } from '@/api/checkout';\nimport { getOrderById, getOrderDetails } from '@/api/order';\nexport default {\n  __name: 'CheckoutForm',\n  props: {\n    customerId: {\n      type: [String, Number],\n      default: ''\n    }\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    const createOrderId = ref('');\n    const createCustomerId = ref(props.customerId || '');\n    const createTableId = ref('');\n    const createPeopleCount = ref('');\n    const createSelectedDishes = ref([]); // {dishId, dishName, quantity}\n    const menuList = ref([]);\n    const message = ref('');\n    const error = ref('');\n    const orderDetails = ref([]);\n    const checkoutOrderId = ref('');\n    const orderInfo = ref(null);\n    const updateOrderId = ref('');\n    const updateCustomerId = ref('');\n    const updateTableId = ref('');\n    const updatePeopleCount = ref('');\n    const updateSelectedDishes = ref([]); // {dishId, dishName, quantity}\n\n    onMounted(async () => {\n      await fetchMenuList();\n    });\n\n    // 保证props变化时同步\n    watch(() => props.customerId, val => {\n      createCustomerId.value = val;\n    });\n    async function fetchMenuList() {\n      try {\n        const res = await getMenuList();\n        menuList.value = Array.isArray(res) ? res : res.data || [];\n      } catch (err) {\n        error.value = err;\n      }\n    }\n    async function handleCreateOrder() {\n      message.value = '';\n      error.value = '';\n      try {\n        const res = await createOrder({\n          tableId: Number(createTableId.value),\n          customerId: Number(createCustomerId.value),\n          peopleCount: Number(createPeopleCount.value)\n        });\n        createOrderId.value = res.orderId;\n        if (createOrderId.value) {\n          ElMessage.success('订单创建成功，ID: ' + createOrderId.value);\n        } else {\n          ElMessage.warning('订单创建成功，但未返回订单ID');\n        }\n      } catch (err) {\n        error.value = err;\n      }\n    }\n    function handleDishDblClick(row) {\n      // 检查是否有可操作的订单（创建订单或更新订单）\n      if (!createOrderId.value && !updateOrderId.value) {\n        ElMessage.warning('请先创建订单或查询订单');\n        return;\n      }\n\n      // 优先添加到更新订单区域（如果存在）\n      if (updateOrderId.value) {\n        // 检查是否已添加\n        const exist = updateSelectedDishes.value.find(d => d.dishId === row.dishId);\n        if (exist) {\n          exist.quantity++;\n          handleUpdateQuantityForUpdate(exist, exist.quantity);\n          return;\n        }\n        // 添加到更新订单\n        addDishToOrder({\n          orderId: updateOrderId.value,\n          dishId: row.dishId,\n          quantity: 1\n        }).then(() => {\n          updateSelectedDishes.value.push({\n            ...row,\n            quantity: 1\n          });\n          ElMessage.success('已添加菜品到更新订单: ' + row.dishName);\n        }).catch(err => {\n          error.value = err;\n        });\n      } else if (createOrderId.value) {\n        // 检查是否已添加\n        const exist = createSelectedDishes.value.find(d => d.dishId === row.dishId);\n        if (exist) {\n          exist.quantity++;\n          handleUpdateQuantity(exist, exist.quantity);\n          return;\n        }\n        // 添加到创建订单\n        addDishToOrder({\n          orderId: createOrderId.value,\n          dishId: row.dishId,\n          quantity: 1\n        }).then(() => {\n          createSelectedDishes.value.push({\n            ...row,\n            quantity: 1\n          });\n          ElMessage.success('已添加菜品到创建订单: ' + row.dishName);\n        }).catch(err => {\n          error.value = err;\n        });\n      }\n    }\n    function removeDish(row) {\n      if (!createOrderId.value) return;\n      removeDishFromOrder({\n        orderId: createOrderId.value,\n        dishId: row.dishId\n      }).then(() => {\n        createSelectedDishes.value = createSelectedDishes.value.filter(d => d.dishId !== row.dishId);\n        ElMessage.success('已移除菜品');\n      }).catch(err => {\n        error.value = err;\n      });\n    }\n    function handleUpdateQuantity(row, quantity) {\n      if (!createOrderId.value) return;\n      updateDishQuantity({\n        orderId: createOrderId.value,\n        dishId: row.dishId,\n        quantity\n      }).then(() => {\n        row.quantity = quantity;\n        ElMessage.success('数量已更新');\n      }).catch(err => {\n        error.value = err;\n      });\n    }\n    async function handleQueryOrderByTableId() {\n      if (!updateTableId.value) {\n        ElMessage.warning('请先输入桌号');\n        return;\n      }\n      message.value = '';\n      error.value = '';\n      try {\n        // 1. 通过桌号查询订单基本信息\n        const orderData = await getOrderIdWithDishId(Number(updateTableId.value));\n        console.log('getOrderIdWithDishId 返回数据:', orderData);\n\n        // 修改判断逻辑：检查返回的数据本身\n        if (orderData && Array.isArray(orderData) && orderData.length > 0) {\n          // 获取第一个订单\n          const firstOrder = orderData[0];\n          console.log('第一个订单:', firstOrder);\n          if (firstOrder && firstOrder.order_id) {\n            orderInfo.value = firstOrder;\n            orderDetails.value = [];\n\n            // 2. 获取订单ID并自动填充表单\n            updateOrderId.value = String(firstOrder.order_id || '');\n            updateTableId.value = String(firstOrder.table_id || '');\n            updateCustomerId.value = String(firstOrder.customer_id || '');\n            updatePeopleCount.value = '';\n\n            // 3. 根据订单ID查询详细菜品信息\n            const detailsRes = await getOrderDetails(Number(updateOrderId.value));\n\n            // 4. 处理菜品详情数据\n            if (detailsRes && Array.isArray(detailsRes)) {\n              console.log('桌号查询获取的菜品详情:', detailsRes);\n              updateSelectedDishes.value = detailsRes.map(item => ({\n                detailId: item.detailId,\n                dishId: item.dishId,\n                dishName: item.dishName,\n                price: item.price,\n                quantity: Number(item.quantity) || 1\n              }));\n              console.log('处理后的菜品数据:', updateSelectedDishes.value);\n            } else {\n              updateSelectedDishes.value = [];\n            }\n            ElMessage.success('订单详情加载成功');\n          } else {\n            // 数据存在但没有订单ID字段\n            orderInfo.value = null;\n            updateSelectedDishes.value = [];\n            ElMessage.warning('查询到的订单数据格式不正确');\n          }\n        } else {\n          // 没有返回任何数据或数组为空\n          orderInfo.value = null;\n          updateSelectedDishes.value = [];\n          ElMessage.warning('该桌号没有找到订单信息');\n        }\n      } catch (err) {\n        error.value = err.response?.data?.message || err.message || '获取订单详情失败';\n        ElMessage.error(`获取订单失败: ${error.value}`);\n        console.error('桌号查询错误:', err);\n      }\n    }\n    async function handleQueryOrderDetails() {\n      if (!updateOrderId.value) {\n        ElMessage.warning('请先输入订单ID');\n        return;\n      }\n      message.value = '';\n      error.value = '';\n      try {\n        // 并行请求订单基本信息和菜品详情\n        const [orderRes, detailsRes] = await Promise.all([getOrderById(Number(updateOrderId.value)), getOrderDetails(Number(updateOrderId.value))]);\n        orderInfo.value = orderRes;\n        orderDetails.value = [];\n        if (orderInfo.value) {\n          updateOrderId.value = String(orderInfo.value.orderId || orderInfo.value.order_id || '');\n          updateTableId.value = String(orderInfo.value.tableId || orderInfo.value.table_id || '');\n          updateCustomerId.value = String(orderInfo.value.customerId || orderInfo.value.customer_id || '');\n          updatePeopleCount.value = '';\n        }\n\n        // 确保数量字段正确设置\n        if (detailsRes && Array.isArray(detailsRes)) {\n          console.log('API返回的菜品详情:', detailsRes);\n          updateSelectedDishes.value = detailsRes.map(item => ({\n            detailId: item.detailId,\n            dishId: item.dishId,\n            dishName: item.dishName,\n            price: item.price,\n            quantity: Number(item.quantity) || 1 // 强制转换为数字类型\n          }));\n          console.log('处理后的菜品数据:', updateSelectedDishes.value);\n        } else {\n          updateSelectedDishes.value = [];\n        }\n        ElMessage.success('订单详情加载成功');\n      } catch (err) {\n        error.value = err;\n        ElMessage.error('获取订单详情失败');\n      }\n    }\n    function handleExitEdit() {\n      createOrderId.value = '';\n      createTableId.value = '';\n      createCustomerId.value = '';\n      createPeopleCount.value = '';\n      createSelectedDishes.value = [];\n      orderInfo.value = null;\n      orderDetails.value = [];\n      message.value = '';\n      error.value = '';\n      checkoutOrderId.value = '';\n    }\n    async function handleCheckout() {\n      message.value = '';\n      error.value = '';\n      try {\n        await checkoutOrder(Number(checkoutOrderId.value));\n        message.value = '结账成功！';\n        ElMessage.success('结账成功！');\n      } catch (err) {\n        error.value = err;\n      }\n    }\n    async function handleUpdateOrder() {\n      message.value = '';\n      error.value = '';\n      try {\n        // 这里可以调用更新订单的API\n        ElMessage.success('订单更新成功！');\n      } catch (err) {\n        error.value = err;\n      }\n    }\n    function handleExitUpdateEdit() {\n      updateOrderId.value = '';\n      updateTableId.value = '';\n      updateCustomerId.value = '';\n      updatePeopleCount.value = '';\n      updateSelectedDishes.value = [];\n    }\n    function removeDishForUpdate(row) {\n      if (!updateOrderId.value) return;\n      removeDishFromOrder({\n        orderId: updateOrderId.value,\n        dishId: row.dishId\n      }).then(() => {\n        updateSelectedDishes.value = updateSelectedDishes.value.filter(d => d.dishId !== row.dishId);\n        ElMessage.success('已移除菜品');\n      }).catch(err => {\n        error.value = err;\n      });\n    }\n    function handleUpdateQuantityForUpdate(row, quantity) {\n      if (!updateOrderId.value) return;\n      updateDishQuantity({\n        orderId: updateOrderId.value,\n        dishId: row.dishId,\n        quantity\n      }).then(() => {\n        row.quantity = quantity;\n        ElMessage.success('数量已更新');\n      }).catch(err => {\n        error.value = err;\n      });\n    }\n    const __returned__ = {\n      props,\n      createOrderId,\n      createCustomerId,\n      createTableId,\n      createPeopleCount,\n      createSelectedDishes,\n      menuList,\n      message,\n      error,\n      orderDetails,\n      checkoutOrderId,\n      orderInfo,\n      updateOrderId,\n      updateCustomerId,\n      updateTableId,\n      updatePeopleCount,\n      updateSelectedDishes,\n      fetchMenuList,\n      handleCreateOrder,\n      handleDishDblClick,\n      removeDish,\n      handleUpdateQuantity,\n      handleQueryOrderByTableId,\n      handleQueryOrderDetails,\n      handleExitEdit,\n      handleCheckout,\n      handleUpdateOrder,\n      handleExitUpdateEdit,\n      removeDishForUpdate,\n      handleUpdateQuantityForUpdate,\n      ref,\n      onMounted,\n      watch,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get getMenuList() {\n        return getMenuList;\n      },\n      get createOrder() {\n        return createOrder;\n      },\n      get addDishToOrder() {\n        return addDishToOrder;\n      },\n      get removeDishFromOrder() {\n        return removeDishFromOrder;\n      },\n      get updateDishQuantity() {\n        return updateDishQuantity;\n      },\n      get getOrderIdWithDishId() {\n        return getOrderIdWithDishId;\n      },\n      get checkoutOrder() {\n        return checkoutOrder;\n      },\n      get getOrderById() {\n        return getOrderById;\n      },\n      get getOrderDetails() {\n        return getOrderDetails;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","ElMessage","getMenuList","createOrder","addDishToOrder","removeDishFromOrder","updateDishQuantity","getOrderIdWithDishId","checkoutOrder","getOrderById","getOrderDetails","props","__props","createOrderId","createCustomerId","customerId","createTableId","createPeopleCount","createSelectedDishes","menuList","message","error","orderDetails","checkoutOrderId","orderInfo","updateOrderId","updateCustomerId","updateTableId","updatePeopleCount","updateSelectedDishes","fetchMenuList","val","value","res","Array","isArray","data","err","handleCreateOrder","tableId","Number","peopleCount","orderId","success","warning","handleDishDblClick","row","exist","find","d","dishId","quantity","handleUpdateQuantityForUpdate","then","push","dishName","catch","handleUpdateQuantity","removeDish","filter","handleQueryOrderByTableId","orderData","console","log","length","firstOrder","order_id","String","table_id","customer_id","detailsRes","map","item","detailId","price","response","handleQueryOrderDetails","orderRes","Promise","all","handleExitEdit","handleCheckout","handleUpdateOrder","handleExitUpdateEdit","removeDishForUpdate"],"sources":["D:/数据库课程设计（饭店系统）/restaurant-ordering-system/src/components/checkout/CheckoutForm.vue"],"sourcesContent":["<template>\n  <div class=\"flex gap-8\">\n    <!-- 左侧：菜品列表 -->\n    <div class=\"w-1/2\">\n      <h2 class=\"text-lg font-bold mb-2\">菜品列表（双击添加）</h2>\n      <el-table\n        :data=\"menuList\"\n        style=\"width: 100%; font-size: 18px;\"\n        height=\"850\"\n        @row-dblclick=\"handleDishDblClick\"\n        highlight-current-row>\n        <el-table-column prop=\"dishId\" label=\"菜品ID\" width=\"120\" align=\"center\" />\n        <el-table-column prop=\"dishName\" label=\"菜品名称\" width=\"200\" align=\"center\" />\n        <el-table-column prop=\"price\" label=\"价格\" width=\"120\" align=\"center\">\n          <template #default=\"scope\">¥{{ scope.row.price }}</template>\n        </el-table-column>\n        <el-table-column prop=\"description\" label=\"描述\" min-width=\"200\" />\n      </el-table>\n    </div>\n\n    <!-- 右侧：订单操作与信息 -->\n    <div class=\"w-1/2\">\n      <h2 class=\"text-lg font-bold mb-2\">订单创建</h2>\n      <el-form label-width=\"80px\" class=\"mb-4\">\n        <el-form-item label=\"订单ID\">\n          <el-input v-model=\"createOrderId\" type=\"number\" placeholder=\"输入订单ID\" disabled />\n        </el-form-item>\n        <el-form-item label=\"顾客ID\">\n          <el-input v-model=\"createCustomerId\" type=\"number\" placeholder=\"请输入顾客ID\" :disabled=\"!!props.customerId\" />\n        </el-form-item>\n        <el-form-item label=\"桌子ID\">\n          <el-input v-model=\"createTableId\" type=\"number\" placeholder=\"输入桌子ID\" />\n        </el-form-item>\n        <el-form-item label=\"人数\">\n          <el-input v-model=\"createPeopleCount\" type=\"number\" min=\"1\" placeholder=\"输入人数\" />\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"handleCreateOrder\">创建订单</el-button>\n          <el-button v-if=\"createOrderId\" type=\"warning\" class=\"ml-4\" @click=\"handleExitEdit\">退出编辑</el-button>\n        </el-form-item>\n      </el-form>\n\n      <el-divider>已选菜品</el-divider>\n      <div style=\"display: flex; flex-direction: column; width: 100%;\">\n        <el-table :data=\"createSelectedDishes\" style=\"flex: 1 1 auto; width: 100%;\" size=\"small\" layout=\"fixed\">\n          <el-table-column prop=\"dishId\" label=\"菜品ID\" width=\"150%\"  />\n          <el-table-column prop=\"dishName\" label=\"菜品名称\" width=\"200%\" />\n          <el-table-column prop=\"quantity\" label=\"数量\" width=\"200%\">\n            <template #default=\"scope\">\n              <el-input-number v-model=\"scope.row.quantity\" :min=\"1\" @change=\"q => handleUpdateQuantity(scope.row, q)\" style=\"width: 100%;\" />\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"150%\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button size=\"small\" type=\"danger\" @click=\"removeDish(scope.row)\">移除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n\n      <el-divider>订单更新</el-divider>\n      <h3 class=\"text-md font-bold mb-2\">订单更新</h3>\n      <el-form label-width=\"80px\" class=\"mb-4\">\n        <el-form-item label=\"订单ID\">\n          <el-input v-model=\"updateOrderId\" type=\"number\" placeholder=\"输入订单ID\"/>\n        </el-form-item>\n        <el-form-item label=\"顾客ID\">\n          <el-input v-model=\"updateCustomerId\" type=\"number\" placeholder=\"输入顾客ID\" />\n        </el-form-item>\n        <el-form-item label=\"桌子ID\">\n          <el-input v-model=\"updateTableId\" type=\"number\" placeholder=\"输入桌子ID\" />\n        </el-form-item>\n        <el-form-item label=\"人数\">\n          <el-input v-model=\"updatePeopleCount\" type=\"number\" min=\"1\" placeholder=\"输入人数\" />\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"handleUpdateOrder\" :disabled=\"!updateOrderId\">更新订单</el-button>\n          <el-button type=\"primary\" @click=\"handleQueryOrderDetails\">根据orderID查询订单</el-button>\n          <el-button type=\"primary\" @click=\"handleQueryOrderByTableId\">根据桌号查询订单</el-button>\n          <el-button v-if=\"updateOrderId\" type=\"warning\" class=\"ml-4\" @click=\"handleExitUpdateEdit\">退出编辑</el-button>\n        </el-form-item>\n      </el-form>\n\n      <el-divider>已选菜品（更新）</el-divider>\n      <div style=\"display: flex; flex-direction: column; width: 100%;\">\n        <el-table :data=\"updateSelectedDishes\" style=\"flex: 1 1 auto; width: 100%;\" size=\"small\" layout=\"fixed\">\n          <el-table-column prop=\"dishId\" label=\"菜品ID\" width=\"120\" align=\"center\" />\n          <el-table-column prop=\"dishName\" label=\"菜品名称\" width=\"150\" align=\"center\" />\n          <el-table-column prop=\"price\" label=\"价格\" width=\"100\" align=\"center\">\n            <template #default=\"scope\">¥{{ scope.row.price || '0.00' }}</template>\n          </el-table-column>\n          <el-table-column prop=\"quantity\" label=\"数量\" width=\"250\" align=\"center\">\n            <template #default=\"scope\">\n              <el-input-number \n                v-model=\"scope.row.quantity\" \n                :min=\"1\" \n                @change=\"q => handleUpdateQuantityForUpdate(scope.row, q)\" \n                style=\"width: 200px;\"\n              />\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"100\" align=\"center\">\n            <template #default=\"scope\">\n              <el-button size=\"small\" type=\"danger\" @click=\"removeDishForUpdate(scope.row)\">移除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n      \n      <!-- 订单详情卡片展示（根据订单ID或桌号查询都可用） -->\n      <div v-if=\"orderInfo\" class=\"order-info-card p-4 mb-4 bg-gray-50 rounded shadow\">\n        <div v-if=\"orderInfo.orderId\"><b>订单ID：</b>{{ orderInfo.orderId }}</div>\n        <div v-if=\"orderInfo.customerId\"><b>顾客ID：</b>{{ orderInfo.customerId }}</div>\n        <div v-if=\"orderInfo.customerName\"><b>顾客姓名：</b>{{ orderInfo.customerName }}</div>\n        <div v-if=\"orderInfo.tableId\"><b>桌号：</b>{{ orderInfo.tableId }}</div>\n        <div v-if=\"orderInfo.orderTime\"><b>下单时间：</b>{{ orderInfo.orderTime }}</div>\n        <div v-if=\"orderInfo.status\"><b>状态：</b>{{ orderInfo.status }}</div>\n        <div v-if=\"orderInfo.finalAmount\"><b>实付金额：</b>{{ orderInfo.finalAmount }}</div>\n        <div v-if=\"orderInfo.totalAmount\"><b>总金额：</b>{{ orderInfo.totalAmount }}</div>\n        <div v-if=\"orderInfo.phone\"><b>手机号：</b>{{ orderInfo.phone }}</div>\n        <div v-if=\"orderInfo.discount\"><b>折扣：</b>{{ orderInfo.discount }}</div>\n      </div>\n\n      <el-divider>结账</el-divider>\n      <el-form label-width=\"80px\">\n        <el-form-item label=\"订单ID\">\n          <el-input v-model=\"checkoutOrderId\" type=\"number\" placeholder=\"输入订单ID\" style=\"width: 120px;\" />\n          <el-button type=\"success\" class=\"ml-2\" @click=\"handleCheckout\">结账</el-button>\n        </el-form-item>\n      </el-form>\n      <div v-if=\"message\" class=\"mt-2 text-green-600\">{{ message }}</div>\n      <div v-if=\"error\" class=\"mt-2 text-red-600\">{{ error }}</div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, watch, defineProps } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport { getMenuList } from '@/api/menu';\nimport {\n  createOrder,\n  addDishToOrder,\n  removeDishFromOrder,\n  updateDishQuantity,\n  getOrderIdWithDishId,\n  checkoutOrder\n} from '@/api/checkout';\nimport { getOrderById, getOrderDetails } from '@/api/order';\n\nconst props = defineProps({\n  customerId: {\n    type: [String, Number],\n    default: ''\n  }\n})\n\nconst createOrderId = ref('');\nconst createCustomerId = ref(props.customerId || '');\nconst createTableId = ref('');\nconst createPeopleCount = ref('');\nconst createSelectedDishes = ref([]); // {dishId, dishName, quantity}\nconst menuList = ref([]);\nconst message = ref('');\nconst error = ref('');\nconst orderDetails = ref([]);\nconst checkoutOrderId = ref('');\nconst orderInfo = ref(null);\nconst updateOrderId = ref('');\nconst updateCustomerId = ref('');\nconst updateTableId = ref('');\nconst updatePeopleCount = ref('');\nconst updateSelectedDishes = ref([]); // {dishId, dishName, quantity}\n\nonMounted(async () => {\n  await fetchMenuList();\n});\n\n// 保证props变化时同步\nwatch(() => props.customerId, (val) => {\n  createCustomerId.value = val;\n});\n\nasync function fetchMenuList() {\n  try {\n    const res = await getMenuList();\n    menuList.value = Array.isArray(res) ? res : (res.data || []);\n  } catch (err) {\n    error.value = err;\n  }\n}\n\nasync function handleCreateOrder() {\n  message.value = '';\n  error.value = '';\n  try {\n    const res = await createOrder({\n      tableId: Number(createTableId.value),\n      customerId: Number(createCustomerId.value),\n      peopleCount: Number(createPeopleCount.value)\n    });\n    createOrderId.value = res.orderId;\n    if (createOrderId.value) {\n      ElMessage.success('订单创建成功，ID: ' + createOrderId.value);\n    } else {\n      ElMessage.warning('订单创建成功，但未返回订单ID');\n    }\n  } catch (err) {\n    error.value = err;\n  }\n}\n\nfunction handleDishDblClick(row) {\n  // 检查是否有可操作的订单（创建订单或更新订单）\n  if (!createOrderId.value && !updateOrderId.value) {\n    ElMessage.warning('请先创建订单或查询订单');\n    return;\n  }\n  \n  // 优先添加到更新订单区域（如果存在）\n  if (updateOrderId.value) {\n    // 检查是否已添加\n    const exist = updateSelectedDishes.value.find(d => d.dishId === row.dishId);\n    if (exist) {\n      exist.quantity++;\n      handleUpdateQuantityForUpdate(exist, exist.quantity);\n      return;\n    }\n    // 添加到更新订单\n    addDishToOrder({ orderId: updateOrderId.value, dishId: row.dishId, quantity: 1 })\n      .then(() => {\n        updateSelectedDishes.value.push({ ...row, quantity: 1 });\n        ElMessage.success('已添加菜品到更新订单: ' + row.dishName);\n      })\n      .catch(err => {\n        error.value = err;\n      });\n  } else if (createOrderId.value) {\n    // 检查是否已添加\n    const exist = createSelectedDishes.value.find(d => d.dishId === row.dishId);\n    if (exist) {\n      exist.quantity++;\n      handleUpdateQuantity(exist, exist.quantity);\n      return;\n    }\n    // 添加到创建订单\n    addDishToOrder({ orderId: createOrderId.value, dishId: row.dishId, quantity: 1 })\n      .then(() => {\n        createSelectedDishes.value.push({ ...row, quantity: 1 });\n        ElMessage.success('已添加菜品到创建订单: ' + row.dishName);\n      })\n      .catch(err => {\n        error.value = err;\n      });\n  }\n}\n\nfunction removeDish(row) {\n  if (!createOrderId.value) return;\n  removeDishFromOrder({ orderId: createOrderId.value, dishId: row.dishId })\n    .then(() => {\n      createSelectedDishes.value = createSelectedDishes.value.filter(d => d.dishId !== row.dishId);\n      ElMessage.success('已移除菜品');\n    })\n    .catch(err => {\n      error.value = err;\n    });\n}\n\nfunction handleUpdateQuantity(row, quantity) {\n  if (!createOrderId.value) return;\n  updateDishQuantity({ orderId: createOrderId.value, dishId: row.dishId, quantity })\n    .then(() => {\n      row.quantity = quantity;\n      ElMessage.success('数量已更新');\n    })\n    .catch(err => {\n      error.value = err;\n    });\n}\n\nasync function handleQueryOrderByTableId() {\n  if (!updateTableId.value) {\n    ElMessage.warning('请先输入桌号');\n    return;\n  }\n\n  message.value = '';\n  error.value = '';\n  \n  try {\n    // 1. 通过桌号查询订单基本信息\n    const orderData = await getOrderIdWithDishId(Number(updateTableId.value));\n    console.log('getOrderIdWithDishId 返回数据:', orderData);\n    \n    // 修改判断逻辑：检查返回的数据本身\n    if (orderData && Array.isArray(orderData) && orderData.length > 0) {\n      // 获取第一个订单\n      const firstOrder = orderData[0];\n      console.log('第一个订单:', firstOrder);\n      \n      if (firstOrder && firstOrder.order_id) {\n        orderInfo.value = firstOrder;\n        orderDetails.value = [];\n\n        // 2. 获取订单ID并自动填充表单\n        updateOrderId.value = String(firstOrder.order_id || '');\n        updateTableId.value = String(firstOrder.table_id || '');\n        updateCustomerId.value = String(firstOrder.customer_id || '');\n        updatePeopleCount.value = '';\n        \n        // 3. 根据订单ID查询详细菜品信息\n        const detailsRes = await getOrderDetails(Number(updateOrderId.value));\n        \n        // 4. 处理菜品详情数据\n        if (detailsRes && Array.isArray(detailsRes)) {\n          console.log('桌号查询获取的菜品详情:', detailsRes);\n          updateSelectedDishes.value = detailsRes.map(item => ({\n            detailId: item.detailId,\n            dishId: item.dishId,\n            dishName: item.dishName,\n            price: item.price,\n            quantity: Number(item.quantity) || 1\n          }));\n          console.log('处理后的菜品数据:', updateSelectedDishes.value);\n        } else {\n          updateSelectedDishes.value = [];\n        }\n\n        ElMessage.success('订单详情加载成功');\n      } else {\n        // 数据存在但没有订单ID字段\n        orderInfo.value = null;\n        updateSelectedDishes.value = [];\n        ElMessage.warning('查询到的订单数据格式不正确');\n      }\n    } else {\n      // 没有返回任何数据或数组为空\n      orderInfo.value = null;\n      updateSelectedDishes.value = [];\n      ElMessage.warning('该桌号没有找到订单信息');\n    }\n  } catch (err) {\n    error.value = err.response?.data?.message || err.message || '获取订单详情失败';\n    ElMessage.error(`获取订单失败: ${error.value}`);\n    console.error('桌号查询错误:', err);\n  }\n}\n\nasync function handleQueryOrderDetails() {\n  if (!updateOrderId.value) {\n    ElMessage.warning('请先输入订单ID');\n    return;\n  }\n\n  message.value = '';\n  error.value = '';\n  \n  try {\n    // 并行请求订单基本信息和菜品详情\n    const [orderRes, detailsRes] = await Promise.all([\n      getOrderById(Number(updateOrderId.value)),\n      getOrderDetails(Number(updateOrderId.value))\n    ]);\n\n    orderInfo.value = orderRes;\n    orderDetails.value = [];\n\n    if (orderInfo.value) {\n      updateOrderId.value = String(orderInfo.value.orderId || orderInfo.value.order_id || '');\n      updateTableId.value = String(orderInfo.value.tableId || orderInfo.value.table_id || '');\n      updateCustomerId.value = String(orderInfo.value.customerId || orderInfo.value.customer_id || '');\n      updatePeopleCount.value = '';\n    }\n\n    // 确保数量字段正确设置\n    if (detailsRes && Array.isArray(detailsRes)) {\n      console.log('API返回的菜品详情:', detailsRes);\n      updateSelectedDishes.value = detailsRes.map(item => ({\n        detailId: item.detailId,\n        dishId: item.dishId,\n        dishName: item.dishName,\n        price: item.price,\n        quantity: Number(item.quantity) || 1 // 强制转换为数字类型\n      }));\n      console.log('处理后的菜品数据:', updateSelectedDishes.value);\n    } else {\n      updateSelectedDishes.value = [];\n    }\n\n    ElMessage.success('订单详情加载成功');\n  } catch (err) {\n    error.value = err;\n    ElMessage.error('获取订单详情失败');\n  }\n}\n\nfunction handleExitEdit() {\n  createOrderId.value = '';\n  createTableId.value = '';\n  createCustomerId.value = '';\n  createPeopleCount.value = '';\n  createSelectedDishes.value = [];\n  orderInfo.value = null;\n  orderDetails.value = [];\n  message.value = '';\n  error.value = '';\n  checkoutOrderId.value = '';\n}\n\nasync function handleCheckout() {\n  message.value = '';\n  error.value = '';\n  try {\n    await checkoutOrder(Number(checkoutOrderId.value));\n    message.value = '结账成功！';\n    ElMessage.success('结账成功！');\n  } catch (err) {\n    error.value = err;\n  }\n}\n\nasync function handleUpdateOrder() {\n  message.value = '';\n  error.value = '';\n  try {\n    // 这里可以调用更新订单的API\n    ElMessage.success('订单更新成功！');\n  } catch (err) {\n    error.value = err;\n  }\n}\n\nfunction handleExitUpdateEdit() {\n  updateOrderId.value = '';\n  updateTableId.value = '';\n  updateCustomerId.value = '';\n  updatePeopleCount.value = '';\n  updateSelectedDishes.value = [];\n}\n\nfunction removeDishForUpdate(row) {\n  if (!updateOrderId.value) return;\n  removeDishFromOrder({ orderId: updateOrderId.value, dishId: row.dishId })\n    .then(() => {\n      updateSelectedDishes.value = updateSelectedDishes.value.filter(d => d.dishId !== row.dishId);\n      ElMessage.success('已移除菜品');\n    })\n    .catch(err => {\n      error.value = err;\n    });\n}\n\nfunction handleUpdateQuantityForUpdate(row, quantity) {\n  if (!updateOrderId.value) return;\n  updateDishQuantity({ orderId: updateOrderId.value, dishId: row.dishId, quantity })\n    .then(() => {\n      row.quantity = quantity;\n      ElMessage.success('数量已更新');\n    })\n    .catch(err => {\n      error.value = err;\n    });\n}\n</script>\n\n<style scoped>\n.flex { display: flex; }\n.gap-8 { gap: 2rem; }\n.w-1\\/2 { width: 50%; }\n.ml-2 { margin-left: 0.5rem; }\n.ml-4 { margin-left: 1rem; }\n.mt-2 { margin-top: 0.5rem; }\n.text-green-600 { color: #16a34a; }\n.text-red-600 { color: #dc2626; }\n.el-table {\n  font-size: 18px;\n}\n.order-info-card {\n  background: #f9fafb;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.04);\n  margin-bottom: 1rem;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}