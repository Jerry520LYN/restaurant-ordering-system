{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { defineStore } from 'pinia';\nimport { getMenuList, getHotDishes, deleteDish as deleteDishApi, addDish } from '@/api/menu';\nimport { useAuthStore } from './auth';\nexport const useMenuStore = defineStore('menu', {\n  state: () => ({\n    menuList: [],\n    hotDishes: [],\n    error: null\n  }),\n  actions: {\n    async fetchMenuList() {\n      try {\n        const response = await getMenuList();\n        console.log('fetchMenuList - 获取到的result:', response);\n        this.menuList = response || [];\n      } catch (error) {\n        console.error('fetchMenuList - 错误:', error);\n        this.error = error;\n      }\n    },\n    async fetchHotDishes(startTime, endTime) {\n      this.error = null;\n      try {\n        const authStore = useAuthStore();\n        if (!authStore.token) {\n          throw new Error('请先登录');\n        }\n\n        // 确保时间格式为 yyyy-MM-dd（只有日期，没有时分秒）\n        const formatDate = date => {\n          if (typeof date === 'string') {\n            return date.split(' ')[0]; // 只取日期部分\n          }\n          return date;\n        };\n        const formattedStartTime = formatDate(startTime);\n        const formattedEndTime = formatDate(endTime);\n        console.log('fetchHotDishes - 请求参数:', {\n          startTime: formattedStartTime,\n          endTime: formattedEndTime\n        });\n        const response = await getHotDishes(formattedStartTime, formattedEndTime);\n        console.log('fetchHotDishes - 获取到的result:', response);\n        this.hotDishes = response || [];\n      } catch (error) {\n        console.error('fetchHotDishes - 错误:', error);\n        this.error = error;\n        this.hotDishes = [];\n      }\n    },\n    async deleteDish(dishId) {\n      this.error = null;\n      try {\n        await deleteDishApi(dishId);\n        // 可选：从menuList中移除已删除的项，以避免重新获取整个列表\n        this.menuList = this.menuList.filter(dish => dish.dishId !== dishId);\n      } catch (error) {\n        console.error('deleteDish - 错误:', error);\n        this.error = error;\n        throw error; // 将错误向上抛出，以便组件可以捕获它\n      }\n    },\n    async addDish(dishData) {\n      this.error = null;\n      try {\n        const newDish = await addDish(dishData);\n        this.menuList.push(newDish);\n      } catch (error) {\n        console.error('addDish - 错误:', error);\n        this.error = error;\n        throw error;\n      }\n    },\n    async updateDish(dishData) {\n      this.error = null;\n      try {\n        const updatedDish = await updateDish(dishData);\n        this.menuList = this.menuList.map(dish => dish.dishId === dishData.dishId ? updatedDish : dish);\n      } catch (error) {\n        console.error('updateDish - 错误:', error);\n        this.error = error;\n        throw error;\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineStore","getMenuList","getHotDishes","deleteDish","deleteDishApi","addDish","useAuthStore","useMenuStore","state","menuList","hotDishes","error","actions","fetchMenuList","response","console","log","fetchHotDishes","startTime","endTime","authStore","token","Error","formatDate","date","split","formattedStartTime","formattedEndTime","dishId","filter","dish","dishData","newDish","push","updateDish","updatedDish","map"],"sources":["D:/数据库课程设计（饭店系统）/restaurant-ordering-system/src/stores/menu.js"],"sourcesContent":["import { defineStore } from 'pinia';\r\nimport { getMenuList, getHotDishes, deleteDish as deleteDishApi, addDish } from '@/api/menu';\r\nimport { useAuthStore } from './auth';\r\n\r\nexport const useMenuStore = defineStore('menu', {\r\n    state: () => ({\r\n        menuList: [],\r\n        hotDishes: [],\r\n        error: null\r\n    }),\r\n    actions: {\r\n        async fetchMenuList() {\r\n            try {\r\n                const response = await getMenuList();\r\n                console.log('fetchMenuList - 获取到的result:', response);\r\n                this.menuList = response || [];\r\n            } catch (error) {\r\n                console.error('fetchMenuList - 错误:', error);\r\n                this.error = error;\r\n            }\r\n        },\r\n        async fetchHotDishes(startTime, endTime) {\r\n            this.error = null;\r\n            try {\r\n                const authStore = useAuthStore();\r\n                if (!authStore.token) {\r\n                    throw new Error('请先登录');\r\n                }\r\n                \r\n                // 确保时间格式为 yyyy-MM-dd（只有日期，没有时分秒）\r\n                const formatDate = (date) => {\r\n                    if (typeof date === 'string') {\r\n                        return date.split(' ')[0]; // 只取日期部分\r\n                    }\r\n                    return date;\r\n                };\r\n                \r\n                const formattedStartTime = formatDate(startTime);\r\n                const formattedEndTime = formatDate(endTime);\r\n                \r\n                console.log('fetchHotDishes - 请求参数:', { startTime: formattedStartTime, endTime: formattedEndTime });\r\n                const response = await getHotDishes(formattedStartTime, formattedEndTime);\r\n                console.log('fetchHotDishes - 获取到的result:', response);\r\n                this.hotDishes = response || [];\r\n            } catch (error) {\r\n                console.error('fetchHotDishes - 错误:', error);\r\n                this.error = error;\r\n                this.hotDishes = [];\r\n            }\r\n        },\r\n        async deleteDish(dishId) {\r\n            this.error = null;\r\n            try {\r\n                await deleteDishApi(dishId);\r\n                // 可选：从menuList中移除已删除的项，以避免重新获取整个列表\r\n                this.menuList = this.menuList.filter(dish => dish.dishId !== dishId);\r\n            } catch (error) {\r\n                console.error('deleteDish - 错误:', error);\r\n                this.error = error;\r\n                throw error; // 将错误向上抛出，以便组件可以捕获它\r\n            }\r\n        },\r\n        async addDish(dishData) {\r\n            this.error = null;\r\n            try {\r\n                const newDish = await addDish(dishData);\r\n                this.menuList.push(newDish);\r\n            } catch (error) {\r\n                console.error('addDish - 错误:', error);\r\n                this.error = error;\r\n                throw error;\r\n            }\r\n        },\r\n        async updateDish(dishData) {\r\n            this.error = null;\r\n            try {\r\n                const updatedDish = await updateDish(dishData);\r\n                this.menuList = this.menuList.map(dish => dish.dishId === dishData.dishId ? updatedDish : dish);\r\n            } catch (error) {\r\n                console.error('updateDish - 错误:', error);\r\n                this.error = error;\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}