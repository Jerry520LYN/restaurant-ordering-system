{"ast":null,"code":"import { ref, onMounted, computed, watch } from 'vue';\nimport { ElMessage, ElLoading } from 'element-plus';\nimport MenuCard from './MenuCard.vue';\nimport { useMenuStore } from '@/stores/menu';\n\n// 响应式数据\n\nexport default {\n  __name: 'MenuCardLayout',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const startDate = ref('');\n    const endDate = ref('');\n    const menuStore = useMenuStore();\n    const displayMode = ref('all'); // 'all' 或 'hot'\n\n    // 计算属性：根据显示模式选择数据源\n    const displayDishes = computed(() => {\n      if (displayMode.value === 'hot') {\n        return menuStore.hotDishes || [];\n      } else {\n        return menuStore.menuList || [];\n      }\n    });\n\n    // 设置默认日期（当前日期前后7天）\n    const setDefaultDates = () => {\n      const today = new Date();\n      const sevenDaysAgo = new Date(today);\n      sevenDaysAgo.setDate(today.getDate() - 7);\n      startDate.value = sevenDaysAgo.toISOString().split('T')[0];\n      endDate.value = today.toISOString().split('T')[0];\n    };\n\n    // 获取全部菜品\n    const fetchAllDishes = async () => {\n      displayMode.value = 'all';\n      try {\n        await menuStore.fetchMenuList();\n        ElMessage.success('获取全部菜品成功');\n      } catch (error) {\n        ElMessage.error('获取全部菜品失败: ' + error.message);\n      }\n    };\n\n    // 获取热门菜品\n    const fetchHotDishes = async () => {\n      if (!startDate.value || !endDate.value) {\n        ElMessage.warning('请先设置日期范围');\n        return;\n      }\n      if (new Date(startDate.value) > new Date(endDate.value)) {\n        ElMessage.error('开始日期不能晚于结束日期');\n        return;\n      }\n      displayMode.value = 'hot';\n      try {\n        await menuStore.fetchHotDishes(startDate.value, endDate.value);\n        ElMessage.success('获取热门菜品成功');\n      } catch (error) {\n        ElMessage.error('获取热门菜品失败: ' + error.message);\n      }\n    };\n\n    // 监听显示模式变化，自动显示日期选择器\n    watch(displayMode, newMode => {\n      if (newMode === 'hot' && (!startDate.value || !endDate.value)) {\n        setDefaultDates();\n      }\n    });\n\n    // 组件挂载时设置默认日期并获取全部菜品\n    onMounted(() => {\n      setDefaultDates();\n      fetchAllDishes(); // 默认显示全部菜品\n    });\n    const __returned__ = {\n      startDate,\n      endDate,\n      menuStore,\n      displayMode,\n      displayDishes,\n      setDefaultDates,\n      fetchAllDishes,\n      fetchHotDishes,\n      ref,\n      onMounted,\n      computed,\n      watch,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElLoading() {\n        return ElLoading;\n      },\n      MenuCard,\n      get useMenuStore() {\n        return useMenuStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","ElMessage","ElLoading","MenuCard","useMenuStore","startDate","endDate","menuStore","displayMode","displayDishes","value","hotDishes","menuList","setDefaultDates","today","Date","sevenDaysAgo","setDate","getDate","toISOString","split","fetchAllDishes","fetchMenuList","success","error","message","fetchHotDishes","warning","newMode"],"sources":["D:/数据库课程设计（饭店系统）/restaurant-ordering-system/src/components/menu/MenuCardLayout.vue"],"sourcesContent":["<template>\r\n    <div class=\"menu-card-layout\">\r\n        <div class=\"hot-dishes-header\">\r\n            <h2 class=\"hot-dishes-title\">菜品展示</h2>\r\n            <div class=\"controls\">\r\n                <el-button type=\"primary\" @click=\"fetchAllDishes\">显示全部菜品</el-button>\r\n                <div class=\"date-picker-container\" v-if=\"displayMode === 'hot'\">\r\n                    <el-date-picker\r\n                        v-model=\"startDate\"\r\n                        type=\"date\"\r\n                        placeholder=\"开始日期\"\r\n                        format=\"YYYY-MM-DD\"\r\n                        value-format=\"YYYY-MM-DD\"\r\n                        style=\"margin-right: 10px;\"\r\n                    />\r\n                    <el-date-picker\r\n                        v-model=\"endDate\"\r\n                        type=\"date\"\r\n                        placeholder=\"结束日期\"\r\n                        format=\"YYYY-MM-DD\"\r\n                        value-format=\"YYYY-MM-DD\"\r\n                        style=\"margin-right: 10px;\"\r\n                    />\r\n                </div>\r\n                <el-button type=\"success\" @click=\"fetchHotDishes\">显示热门菜品</el-button>\r\n            </div>\r\n        </div>\r\n        \r\n        <!-- 加载状态 -->\r\n        <div v-if=\"menuStore.loading\" class=\"loading-container\">\r\n            <el-loading :fullscreen=\"false\" />\r\n        </div>\r\n        \r\n        <!-- 错误信息 -->\r\n        <div v-if=\"menuStore.error\" class=\"error-message\">\r\n            <el-alert :title=\"menuStore.error\" type=\"error\" show-icon />\r\n        </div>\r\n        \r\n        <!-- 菜单卡片列表 -->\r\n        <el-row v-if=\"!menuStore.loading && !menuStore.error\" :gutter=\"20\">\r\n            <el-col \r\n                v-for=\"dish in (displayDishes || []).slice(0, 8)\" \r\n                :key=\"dish.dish_id || dish.dishId\" \r\n                :xs=\"24\" \r\n                :sm=\"12\" \r\n                :md=\"8\" \r\n                :lg=\"6\"\r\n                style=\"margin-bottom: 20px;\"\r\n            >\r\n                <MenuCard :dish=\"dish\" />\r\n            </el-col>\r\n        </el-row>\r\n        \r\n        <!-- 无数据提示 -->\r\n        <div v-if=\"!menuStore.loading && !menuStore.error && (!displayDishes || displayDishes.length === 0)\" class=\"no-data\">\r\n            <el-empty description=\"暂无菜品数据\" />\r\n        </div>\r\n        \r\n        <!-- 调试信息 -->\r\n        <div v-if=\"process.env.NODE_ENV === 'development'\" class=\"debug-info\">\r\n            <h3>调试信息：</h3>\r\n            <p>显示模式: {{ displayMode }}</p>\r\n            <p>菜品数量: {{ displayDishes ? displayDishes.length : 0 }}</p>\r\n            <p>菜品数据: {{ displayDishes ? displayDishes.slice(0, 2) : '无数据' }}</p>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed, watch } from 'vue';\r\nimport { ElMessage, ElLoading } from 'element-plus';\r\nimport MenuCard from './MenuCard.vue';\r\nimport { useMenuStore } from '@/stores/menu';\r\n\r\n// 响应式数据\r\nconst startDate = ref('');\r\nconst endDate = ref('');\r\nconst menuStore = useMenuStore();\r\nconst displayMode = ref('all'); // 'all' 或 'hot'\r\n\r\n// 计算属性：根据显示模式选择数据源\r\nconst displayDishes = computed(() => {\r\n    if (displayMode.value === 'hot') {\r\n        return menuStore.hotDishes || [];\r\n    } else {\r\n        return menuStore.menuList || [];\r\n    }\r\n});\r\n\r\n// 设置默认日期（当前日期前后7天）\r\nconst setDefaultDates = () => {\r\n    const today = new Date();\r\n    const sevenDaysAgo = new Date(today);\r\n    sevenDaysAgo.setDate(today.getDate() - 7);\r\n    \r\n    startDate.value = sevenDaysAgo.toISOString().split('T')[0];\r\n    endDate.value = today.toISOString().split('T')[0];\r\n};\r\n\r\n// 获取全部菜品\r\nconst fetchAllDishes = async () => {\r\n    displayMode.value = 'all';\r\n    try {\r\n        await menuStore.fetchMenuList();\r\n        ElMessage.success('获取全部菜品成功');\r\n    } catch (error) {\r\n        ElMessage.error('获取全部菜品失败: ' + error.message);\r\n    }\r\n};\r\n\r\n// 获取热门菜品\r\nconst fetchHotDishes = async () => {\r\n    if (!startDate.value || !endDate.value) {\r\n        ElMessage.warning('请先设置日期范围');\r\n        return;\r\n    }\r\n    \r\n    if (new Date(startDate.value) > new Date(endDate.value)) {\r\n        ElMessage.error('开始日期不能晚于结束日期');\r\n        return;\r\n    }\r\n    \r\n    displayMode.value = 'hot';\r\n    try {\r\n        await menuStore.fetchHotDishes(startDate.value, endDate.value);\r\n        ElMessage.success('获取热门菜品成功');\r\n    } catch (error) {\r\n        ElMessage.error('获取热门菜品失败: ' + error.message);\r\n    }\r\n};\r\n\r\n// 监听显示模式变化，自动显示日期选择器\r\nwatch(displayMode, (newMode) => {\r\n    if (newMode === 'hot' && (!startDate.value || !endDate.value)) {\r\n        setDefaultDates();\r\n    }\r\n});\r\n\r\n// 组件挂载时设置默认日期并获取全部菜品\r\nonMounted(() => {\r\n    setDefaultDates();\r\n    fetchAllDishes(); // 默认显示全部菜品\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.menu-card-layout {\r\n    padding: 20px;\r\n}\r\n\r\n.hot-dishes-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n    flex-wrap: wrap;\r\n    gap: 10px;\r\n}\r\n\r\n.hot-dishes-title {\r\n    margin: 0;\r\n    color: #333;\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n}\r\n\r\n.controls {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n\r\n.date-picker-container {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n}\r\n\r\n.loading-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 200px;\r\n}\r\n\r\n.error-message {\r\n    margin: 20px 0;\r\n}\r\n\r\n.no-data {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 200px;\r\n}\r\n\r\n.debug-info {\r\n    margin-top: 20px;\r\n    padding: 15px;\r\n    background-color: #f5f5f5;\r\n    border-radius: 5px;\r\n    font-size: 12px;\r\n}\r\n\r\n.debug-info h3 {\r\n    margin: 0 0 10px 0;\r\n    color: #666;\r\n}\r\n\r\n.debug-info p {\r\n    margin: 5px 0;\r\n    color: #666;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    .hot-dishes-header {\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n    }\r\n    \r\n    .controls {\r\n        width: 100%;\r\n        flex-wrap: wrap;\r\n    }\r\n    \r\n    .date-picker-container {\r\n        width: 100%;\r\n        flex-wrap: wrap;\r\n    }\r\n}\r\n</style>"],"mappings":"AAqEA,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,KAAK;AACrD,SAASC,SAAS,EAAEC,SAAS,QAAQ,cAAc;AACnD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,SAASC,YAAY,QAAQ,eAAe;;AAE5C;;;;;;;;IACA,MAAMC,SAAS,GAAGR,GAAG,CAAC,EAAE,CAAC;IACzB,MAAMS,OAAO,GAAGT,GAAG,CAAC,EAAE,CAAC;IACvB,MAAMU,SAAS,GAAGH,YAAY,CAAC,CAAC;IAChC,MAAMI,WAAW,GAAGX,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;;IAEhC;IACA,MAAMY,aAAa,GAAGV,QAAQ,CAAC,MAAM;MACjC,IAAIS,WAAW,CAACE,KAAK,KAAK,KAAK,EAAE;QAC7B,OAAOH,SAAS,CAACI,SAAS,IAAI,EAAE;MACpC,CAAC,MAAM;QACH,OAAOJ,SAAS,CAACK,QAAQ,IAAI,EAAE;MACnC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;MAC1B,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;MACxB,MAAMC,YAAY,GAAG,IAAID,IAAI,CAACD,KAAK,CAAC;MACpCE,YAAY,CAACC,OAAO,CAACH,KAAK,CAACI,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;MAEzCb,SAAS,CAACK,KAAK,GAAGM,YAAY,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC1Dd,OAAO,CAACI,KAAK,GAAGI,KAAK,CAACK,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC;;IAED;IACA,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/Bb,WAAW,CAACE,KAAK,GAAG,KAAK;MACzB,IAAI;QACA,MAAMH,SAAS,CAACe,aAAa,CAAC,CAAC;QAC/BrB,SAAS,CAACsB,OAAO,CAAC,UAAU,CAAC;MACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZvB,SAAS,CAACuB,KAAK,CAAC,YAAY,GAAGA,KAAK,CAACC,OAAO,CAAC;MACjD;IACJ,CAAC;;IAED;IACA,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI,CAACrB,SAAS,CAACK,KAAK,IAAI,CAACJ,OAAO,CAACI,KAAK,EAAE;QACpCT,SAAS,CAAC0B,OAAO,CAAC,UAAU,CAAC;QAC7B;MACJ;MAEA,IAAI,IAAIZ,IAAI,CAACV,SAAS,CAACK,KAAK,CAAC,GAAG,IAAIK,IAAI,CAACT,OAAO,CAACI,KAAK,CAAC,EAAE;QACrDT,SAAS,CAACuB,KAAK,CAAC,cAAc,CAAC;QAC/B;MACJ;MAEAhB,WAAW,CAACE,KAAK,GAAG,KAAK;MACzB,IAAI;QACA,MAAMH,SAAS,CAACmB,cAAc,CAACrB,SAAS,CAACK,KAAK,EAAEJ,OAAO,CAACI,KAAK,CAAC;QAC9DT,SAAS,CAACsB,OAAO,CAAC,UAAU,CAAC;MACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZvB,SAAS,CAACuB,KAAK,CAAC,YAAY,GAAGA,KAAK,CAACC,OAAO,CAAC;MACjD;IACJ,CAAC;;IAED;IACAzB,KAAK,CAACQ,WAAW,EAAGoB,OAAO,IAAK;MAC5B,IAAIA,OAAO,KAAK,KAAK,KAAK,CAACvB,SAAS,CAACK,KAAK,IAAI,CAACJ,OAAO,CAACI,KAAK,CAAC,EAAE;QAC3DG,eAAe,CAAC,CAAC;MACrB;IACJ,CAAC,CAAC;;IAEF;IACAf,SAAS,CAAC,MAAM;MACZe,eAAe,CAAC,CAAC;MACjBQ,cAAc,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}