{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, watch } from 'vue';\nimport { useMenuStore } from '@/stores/menu';\nimport { ElMessage } from 'element-plus';\nexport default {\n  __name: 'MenuUpdateCard',\n  props: {\n    dish: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: ['update-success', 'close'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n\n    // Form structure remains the same\n    const form = ref({\n      dishId: '',\n      dishName: '',\n      price: '',\n      description: '',\n      imageUrl: ''\n    });\n\n    // Real-time changes tracking\n    const dirtyFields = ref(new Set());\n    /*\r\n    这行代码创建了一个响应式的 Set 对象，用于跟踪表单中哪些字段已经被修改过（即\"脏\"字段）。\r\n    \r\n    具体解释：\r\n    - `ref(new Set())` 创建了一个响应式的 Set 集合\r\n    - `dirtyFields` 用来存储已经被用户修改过的字段名\r\n    - 当用户修改某个表单字段时，该字段名会被添加到这个 Set 中\r\n    - 这样可以实现\"脏字段检测\"，只保存用户实际修改过的字段，而不是整个表单\r\n    \r\n    例如：\r\n    - 用户修改了\"菜品名称\"字段 → `dirtyFields` 会包含 `\"dishName\"`\r\n    - 用户修改了\"价格\"字段 → `dirtyFields` 会包含 `\"dishName\"` 和 `\"price\"`\r\n    - 这样可以实现部分更新，只更新用户实际修改的字段\r\n    */\n\n    // Watch individual fields for changes\n    const trackChanges = field => {\n      watch(() => form.value[field], () => {\n        dirtyFields.value.add(field);\n      }, {\n        deep: true\n      });\n    };\n    ['dishName', 'price', 'description', 'imageUrl'].forEach(trackChanges);\n\n    // Original submit handler (unchanged)\n    const handleSubmit = async () => {\n      try {\n        const menuStore = useMenuStore();\n        await menuStore.updateDish(form.value);\n        ElMessage.success('Full update successful');\n        emit('update-success');\n      } catch (error) {\n        ElMessage.error('Update failed: ' + error.message);\n      }\n    };\n\n    // Cancel handler remains unchanged\n    const handleCancel = () => {\n      emit('close');\n    };\n\n    // Initialize form\n    watch(() => props.dish, newDish => {\n      if (newDish) {\n        form.value = {\n          dishId: newDish.dishId,\n          dishName: newDish.dishName || newDish.dish_name || '',\n          price: newDish.price || '',\n          description: newDish.description || '',\n          imageUrl: newDish.imageUrl || newDish.image_url || ''\n        };\n        dirtyFields.value.clear();\n      }\n    }, {\n      immediate: true,\n      deep: true\n    });\n    const __returned__ = {\n      props,\n      emit,\n      form,\n      dirtyFields,\n      trackChanges,\n      handleSubmit,\n      handleCancel,\n      ref,\n      watch,\n      get useMenuStore() {\n        return useMenuStore;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","useMenuStore","ElMessage","props","__props","emit","__emit","form","dishId","dishName","price","description","imageUrl","dirtyFields","Set","trackChanges","field","value","add","deep","forEach","handleSubmit","menuStore","updateDish","success","error","message","handleCancel","dish","newDish","dish_name","image_url","clear","immediate"],"sources":["D:/数据库课程设计（饭店系统）/restaurant-ordering-system/src/components/menu/MenuUpdateCard.vue"],"sourcesContent":["<template>\r\n    <el-form :model=\"form\" label-width=\"80px\" ref=\"formRef\">\r\n        <el-form-item label=\"菜品名称\" prop=\"dishName\">\r\n            <el-input v-model=\"form.dishName\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"价格\" prop=\"price\">\r\n            <el-input v-model=\"form.price\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"描述\" prop=\"description\">\r\n            <el-input v-model=\"form.description\" type=\"textarea\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"图片URL\" prop=\"imageUrl\">\r\n            <el-input v-model=\"form.imageUrl\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n            <el-button type=\"primary\" @click=\"handleSubmit\">更新</el-button>\r\n            <el-button @click=\"handleCancel\">取消</el-button>\r\n        </el-form-item>\r\n    </el-form>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, watch, defineProps, defineEmits } from 'vue';\r\nimport { useMenuStore } from '@/stores/menu';\r\nimport { ElMessage } from 'element-plus';\r\n\r\nconst props = defineProps({\r\n    dish: {\r\n        type: Object,\r\n        required: true\r\n    }\r\n});\r\n\r\nconst emit = defineEmits(['update-success', 'close']);\r\n\r\n// Form structure remains the same\r\nconst form = ref({\r\n    dishId: '',\r\n    dishName: '',\r\n    price: '',\r\n    description: '',\r\n    imageUrl: ''\r\n});\r\n\r\n// Real-time changes tracking\r\nconst dirtyFields = ref(new Set());\r\n/*\r\n这行代码创建了一个响应式的 Set 对象，用于跟踪表单中哪些字段已经被修改过（即\"脏\"字段）。\r\n\r\n具体解释：\r\n- `ref(new Set())` 创建了一个响应式的 Set 集合\r\n- `dirtyFields` 用来存储已经被用户修改过的字段名\r\n- 当用户修改某个表单字段时，该字段名会被添加到这个 Set 中\r\n- 这样可以实现\"脏字段检测\"，只保存用户实际修改过的字段，而不是整个表单\r\n\r\n例如：\r\n- 用户修改了\"菜品名称\"字段 → `dirtyFields` 会包含 `\"dishName\"`\r\n- 用户修改了\"价格\"字段 → `dirtyFields` 会包含 `\"dishName\"` 和 `\"price\"`\r\n- 这样可以实现部分更新，只更新用户实际修改的字段\r\n*/\r\n\r\n// Watch individual fields for changes\r\nconst trackChanges = (field) => {\r\n    watch(() => form.value[field], () => {\r\n        dirtyFields.value.add(field);\r\n    }, { deep: true });\r\n};\r\n\r\n['dishName', 'price', 'description', 'imageUrl'].forEach(trackChanges);\r\n\r\n// Original submit handler (unchanged)\r\nconst handleSubmit = async () => {\r\n    try {\r\n        const menuStore = useMenuStore();\r\n        await menuStore.updateDish(form.value);\r\n        ElMessage.success('Full update successful');\r\n        emit('update-success');\r\n    } catch (error) {\r\n        ElMessage.error('Update failed: ' + error.message);\r\n    }\r\n};\r\n\r\n// Cancel handler remains unchanged\r\nconst handleCancel = () => {\r\n    emit('close');\r\n};\r\n\r\n// Initialize form\r\nwatch(() => props.dish, (newDish) => {\r\n    if (newDish) {\r\n        form.value = {\r\n            dishId: newDish.dishId,\r\n            dishName: newDish.dishName || newDish.dish_name || '',\r\n            price: newDish.price || '',\r\n            description: newDish.description || '',\r\n            imageUrl: newDish.imageUrl || newDish.image_url || ''\r\n        };\r\n        dirtyFields.value.clear();\r\n    }\r\n}, { immediate: true, deep: true });\r\n\r\n</script>"],"mappings":";;;;;;;AAsBA,SAASA,GAAG,EAAEC,KAA+B,QAAQ,KAAK;AAC1D,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,SAAS,QAAQ,cAAc;;;;;;;;;;;;;;;IAExC,MAAMC,KAAK,GAAGC,OAKZ;IAEF,MAAMC,IAAI,GAAGC,MAAwC;;IAErD;IACA,MAAMC,IAAI,GAAGR,GAAG,CAAC;MACbS,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE;IACd,CAAC,CAAC;;IAEF;IACA,MAAMC,WAAW,GAAGd,GAAG,CAAC,IAAIe,GAAG,CAAC,CAAC,CAAC;IAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEA;IACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;MAC5BhB,KAAK,CAAC,MAAMO,IAAI,CAACU,KAAK,CAACD,KAAK,CAAC,EAAE,MAAM;QACjCH,WAAW,CAACI,KAAK,CAACC,GAAG,CAACF,KAAK,CAAC;MAChC,CAAC,EAAE;QAAEG,IAAI,EAAE;MAAK,CAAC,CAAC;IACtB,CAAC;IAED,CAAC,UAAU,EAAE,OAAO,EAAE,aAAa,EAAE,UAAU,CAAC,CAACC,OAAO,CAACL,YAAY,CAAC;;IAEtE;IACA,MAAMM,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMC,SAAS,GAAGrB,YAAY,CAAC,CAAC;QAChC,MAAMqB,SAAS,CAACC,UAAU,CAAChB,IAAI,CAACU,KAAK,CAAC;QACtCf,SAAS,CAACsB,OAAO,CAAC,wBAAwB,CAAC;QAC3CnB,IAAI,CAAC,gBAAgB,CAAC;MAC1B,CAAC,CAAC,OAAOoB,KAAK,EAAE;QACZvB,SAAS,CAACuB,KAAK,CAAC,iBAAiB,GAAGA,KAAK,CAACC,OAAO,CAAC;MACtD;IACJ,CAAC;;IAED;IACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACvBtB,IAAI,CAAC,OAAO,CAAC;IACjB,CAAC;;IAED;IACAL,KAAK,CAAC,MAAMG,KAAK,CAACyB,IAAI,EAAGC,OAAO,IAAK;MACjC,IAAIA,OAAO,EAAE;QACTtB,IAAI,CAACU,KAAK,GAAG;UACTT,MAAM,EAAEqB,OAAO,CAACrB,MAAM;UACtBC,QAAQ,EAAEoB,OAAO,CAACpB,QAAQ,IAAIoB,OAAO,CAACC,SAAS,IAAI,EAAE;UACrDpB,KAAK,EAAEmB,OAAO,CAACnB,KAAK,IAAI,EAAE;UAC1BC,WAAW,EAAEkB,OAAO,CAAClB,WAAW,IAAI,EAAE;UACtCC,QAAQ,EAAEiB,OAAO,CAACjB,QAAQ,IAAIiB,OAAO,CAACE,SAAS,IAAI;QACvD,CAAC;QACDlB,WAAW,CAACI,KAAK,CAACe,KAAK,CAAC,CAAC;MAC7B;IACJ,CAAC,EAAE;MAAEC,SAAS,EAAE,IAAI;MAAEd,IAAI,EAAE;IAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}