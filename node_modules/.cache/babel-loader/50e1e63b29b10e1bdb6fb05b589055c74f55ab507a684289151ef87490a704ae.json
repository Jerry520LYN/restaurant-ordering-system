{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, watch } from 'vue';\nimport { useMenuStore } from '@/stores/menu';\nimport { ElMessage } from 'element-plus';\nexport default {\n  __name: 'MenuUpdateCard',\n  props: {\n    dish: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: ['update-success', 'close'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n    const form = ref({\n      dishId: '',\n      dishName: '',\n      price: '',\n      description: '',\n      imageUrl: ''\n    });\n    const dirtyFields = ref(new Set());\n    const trackChanges = field => {\n      watch(() => form.value[field], () => {\n        dirtyFields.value.add(field);\n      }, {\n        deep: true\n      });\n    };\n    ['dishName', 'price', 'description', 'imageUrl'].forEach(trackChanges);\n    const saveField = debounce(async field => {\n      if (!dirtyFields.value.has(field)) return;\n      try {\n        const payload = {\n          dishId: form.value.dishId,\n          [field]: form.value[field]\n        };\n        const menuStore = useMenuStore();\n        await menuStore.partialUpdate(payload); // You'll need to implement this in your store\n        dirtyFields.value.delete(field);\n        ElMessage.success(`${field} updated`);\n      } catch (error) {\n        ElMessage.error(`${field} update failed: ${error.message}`);\n      }\n    }, 1000);\n    const handleSubmit = async () => {\n      try {\n        console.log('MenuUpdateCard - 准备发送的数据:', form.value);\n        const menuStore = useMenuStore();\n        await menuStore.updateDish(form.value);\n        ElMessage.success('更新操作已发送（请连接后端API）');\n        emit('update-success');\n      } catch (error) {\n        console.error('MenuUpdateCard - 更新失败:', error);\n        ElMessage.error('更新失败: ' + (error.message || '未知错误'));\n      }\n    };\n    const handleCancel = () => {\n      emit('close');\n    };\n    const __returned__ = {\n      props,\n      emit,\n      form,\n      dirtyFields,\n      trackChanges,\n      saveField,\n      handleSubmit,\n      handleCancel,\n      ref,\n      watch,\n      get useMenuStore() {\n        return useMenuStore;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","useMenuStore","ElMessage","props","__props","emit","__emit","form","dishId","dishName","price","description","imageUrl","dirtyFields","Set","trackChanges","field","value","add","deep","forEach","saveField","debounce","has","payload","menuStore","partialUpdate","delete","success","error","message","handleSubmit","console","log","updateDish","handleCancel"],"sources":["D:/数据库课程设计（饭店系统）/restaurant-ordering-system/src/components/menu/MenuUpdateCard.vue"],"sourcesContent":["<template>\r\n    <el-form :model=\"form\" label-width=\"80px\" ref=\"formRef\">\r\n        <el-form-item label=\"菜品名称\" prop=\"dishName\">\r\n            <el-input v-model=\"form.dishName\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"价格\" prop=\"price\">\r\n            <el-input v-model=\"form.price\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"描述\" prop=\"description\">\r\n            <el-input v-model=\"form.description\" type=\"textarea\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"图片URL\" prop=\"imageUrl\">\r\n            <el-input v-model=\"form.imageUrl\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n            <el-button type=\"primary\" @click=\"handleSubmit\">更新</el-button>\r\n            <el-button @click=\"handleCancel\">取消</el-button>\r\n        </el-form-item>\r\n    </el-form>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, watch, defineProps, defineEmits } from 'vue';\r\nimport { useMenuStore } from '@/stores/menu';\r\nimport { ElMessage } from 'element-plus';\r\n\r\nconst props = defineProps({\r\n    dish: {\r\n        type: Object,\r\n        required: true\r\n    }\r\n});\r\n\r\nconst emit = defineEmits(['update-success', 'close']);\r\n\r\nconst form = ref({\r\n    dishId: '',\r\n    dishName: '',\r\n    price: '',\r\n    description: '',\r\n    imageUrl: ''\r\n});\r\nconst dirtyFields = ref(new Set());\r\nconst trackChanges = (field) => {\r\n    watch(() => form.value[field], () => {\r\n        dirtyFields.value.add(field);\r\n    }, { deep: true });\r\n};\r\n['dishName', 'price', 'description', 'imageUrl'].forEach(trackChanges);\r\nconst saveField = debounce(async (field) => {\r\n    if (!dirtyFields.value.has(field)) return;\r\n    \r\n    try {\r\n        const payload = {\r\n            dishId: form.value.dishId,\r\n            [field]: form.value[field]\r\n        };\r\n        \r\n        const menuStore = useMenuStore();\r\n        await menuStore.partialUpdate(payload); // You'll need to implement this in your store\r\n        dirtyFields.value.delete(field);\r\n        ElMessage.success(`${field} updated`);\r\n    } catch (error) {\r\n        ElMessage.error(`${field} update failed: ${error.message}`);\r\n    }\r\n}, 1000);\r\n\r\n\r\nconst handleSubmit = async () => {\r\n    try {\r\n        console.log('MenuUpdateCard - 准备发送的数据:', form.value);\r\n        const menuStore = useMenuStore();\r\n        await menuStore.updateDish(form.value);\r\n        ElMessage.success('更新操作已发送（请连接后端API）');\r\n        emit('update-success'); \r\n    } catch (error) {\r\n        console.error('MenuUpdateCard - 更新失败:', error);\r\n        ElMessage.error('更新失败: ' + (error.message || '未知错误'));\r\n    }\r\n};\r\n\r\nconst handleCancel = () => {\r\n    emit('close');\r\n};\r\n</script>"],"mappings":";;;;;;;AAsBA,SAASA,GAAG,EAAEC,KAA+B,QAAQ,KAAK;AAC1D,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,SAAS,QAAQ,cAAc;;;;;;;;;;;;;;;IAExC,MAAMC,KAAK,GAAGC,OAKZ;IAEF,MAAMC,IAAI,GAAGC,MAAwC;IAErD,MAAMC,IAAI,GAAGR,GAAG,CAAC;MACbS,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE;IACd,CAAC,CAAC;IACF,MAAMC,WAAW,GAAGd,GAAG,CAAC,IAAIe,GAAG,CAAC,CAAC,CAAC;IAClC,MAAMC,YAAY,GAAIC,KAAK,IAAK;MAC5BhB,KAAK,CAAC,MAAMO,IAAI,CAACU,KAAK,CAACD,KAAK,CAAC,EAAE,MAAM;QACjCH,WAAW,CAACI,KAAK,CAACC,GAAG,CAACF,KAAK,CAAC;MAChC,CAAC,EAAE;QAAEG,IAAI,EAAE;MAAK,CAAC,CAAC;IACtB,CAAC;IACD,CAAC,UAAU,EAAE,OAAO,EAAE,aAAa,EAAE,UAAU,CAAC,CAACC,OAAO,CAACL,YAAY,CAAC;IACtE,MAAMM,SAAS,GAAGC,QAAQ,CAAC,MAAON,KAAK,IAAK;MACxC,IAAI,CAACH,WAAW,CAACI,KAAK,CAACM,GAAG,CAACP,KAAK,CAAC,EAAE;MAEnC,IAAI;QACA,MAAMQ,OAAO,GAAG;UACZhB,MAAM,EAAED,IAAI,CAACU,KAAK,CAACT,MAAM;UACzB,CAACQ,KAAK,GAAGT,IAAI,CAACU,KAAK,CAACD,KAAK;QAC7B,CAAC;QAED,MAAMS,SAAS,GAAGxB,YAAY,CAAC,CAAC;QAChC,MAAMwB,SAAS,CAACC,aAAa,CAACF,OAAO,CAAC,CAAC,CAAC;QACxCX,WAAW,CAACI,KAAK,CAACU,MAAM,CAACX,KAAK,CAAC;QAC/Bd,SAAS,CAAC0B,OAAO,CAAC,GAAGZ,KAAK,UAAU,CAAC;MACzC,CAAC,CAAC,OAAOa,KAAK,EAAE;QACZ3B,SAAS,CAAC2B,KAAK,CAAC,GAAGb,KAAK,mBAAmBa,KAAK,CAACC,OAAO,EAAE,CAAC;MAC/D;IACJ,CAAC,EAAE,IAAI,CAAC;IAGR,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACAC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE1B,IAAI,CAACU,KAAK,CAAC;QACpD,MAAMQ,SAAS,GAAGxB,YAAY,CAAC,CAAC;QAChC,MAAMwB,SAAS,CAACS,UAAU,CAAC3B,IAAI,CAACU,KAAK,CAAC;QACtCf,SAAS,CAAC0B,OAAO,CAAC,mBAAmB,CAAC;QACtCvB,IAAI,CAAC,gBAAgB,CAAC;MAC1B,CAAC,CAAC,OAAOwB,KAAK,EAAE;QACZG,OAAO,CAACH,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C3B,SAAS,CAAC2B,KAAK,CAAC,QAAQ,IAAIA,KAAK,CAACC,OAAO,IAAI,MAAM,CAAC,CAAC;MACzD;IACJ,CAAC;IAED,MAAMK,YAAY,GAAGA,CAAA,KAAM;MACvB9B,IAAI,CAAC,OAAO,CAAC;IACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}