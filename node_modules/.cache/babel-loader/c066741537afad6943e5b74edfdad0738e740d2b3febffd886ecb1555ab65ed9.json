{"ast":null,"code":"import { defineStore } from 'pinia';\nexport const useAuthStore = defineStore('auth', {\n  state: () => ({\n    user: null,\n    token: localStorage.getItem('token') || null,\n    isLoading: false,\n    error: null\n  }),\n  getters: {\n    isAuthenticated: state => !!state.token\n  },\n  actions: {\n    async login(credentials) {\n      this.isLoading = true;\n      this.error = null;\n      try {\n        // 模拟登录逻辑开始 ---\n        // 实际开发中可以删除下面这部分，启用真实API请求\n        const mockUser = {\n          id: 1,\n          username: credentials.username,\n          role: 'admin'\n        };\n        const mockToken = 'mocked-jwt-token-for-dev';\n        this.user = mockUser;\n        this.token = mockToken;\n        localStorage.setItem('token', mockToken);\n        return true;\n        // 模拟登录逻辑结束 ---\n\n        // 真实API登录（暂时注释掉）\n        // const { user, token } = await authApi.login(credentials)\n        // this.user = user\n        // this.token = token\n        // localStorage.setItem('token', token)\n        // return true\n      } catch (error) {\n        this.error = '登录失败，请检查用户名或密码';\n        return false;\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    logout() {\n      this.user = null;\n      this.token = null;\n      localStorage.removeItem('token');\n    }\n  }\n});","map":{"version":3,"names":["defineStore","useAuthStore","state","user","token","localStorage","getItem","isLoading","error","getters","isAuthenticated","actions","login","credentials","mockUser","id","username","role","mockToken","setItem","logout","removeItem"],"sources":["D:/数据库课程设计（饭店系统）/restaurant-ordering-system/src/stores/auth.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\n\r\nexport const useAuthStore = defineStore('auth', {\r\n  state: () => ({\r\n    user: null,\r\n    token: localStorage.getItem('token') || null,\r\n    isLoading: false,\r\n    error: null\r\n  }),\r\n  getters: {\r\n    isAuthenticated: (state) => !!state.token\r\n  },\r\n  actions: {\r\n    async login(credentials) {\r\n      this.isLoading = true\r\n      this.error = null\r\n\r\n      try {\r\n        // 模拟登录逻辑开始 ---\r\n        // 实际开发中可以删除下面这部分，启用真实API请求\r\n        const mockUser = {\r\n          id: 1,\r\n          username: credentials.username,\r\n          role: 'admin'\r\n        }\r\n        const mockToken = 'mocked-jwt-token-for-dev'\r\n\r\n        this.user = mockUser\r\n        this.token = mockToken\r\n        localStorage.setItem('token', mockToken)\r\n\r\n        return true\r\n        // 模拟登录逻辑结束 ---\r\n\r\n        // 真实API登录（暂时注释掉）\r\n        // const { user, token } = await authApi.login(credentials)\r\n        // this.user = user\r\n        // this.token = token\r\n        // localStorage.setItem('token', token)\r\n        // return true\r\n      } catch (error) {\r\n        this.error = '登录失败，请检查用户名或密码'\r\n        return false\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n    logout() {\r\n      this.user = null\r\n      this.token = null\r\n      localStorage.removeItem('token')\r\n    }\r\n  }\r\n})"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC,MAAM,EAAE;EAC9CE,KAAK,EAAEA,CAAA,MAAO;IACZC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI;IAC5CC,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE;EACT,CAAC,CAAC;EACFC,OAAO,EAAE;IACPC,eAAe,EAAGR,KAAK,IAAK,CAAC,CAACA,KAAK,CAACE;EACtC,CAAC;EACDO,OAAO,EAAE;IACP,MAAMC,KAAKA,CAACC,WAAW,EAAE;MACvB,IAAI,CAACN,SAAS,GAAG,IAAI;MACrB,IAAI,CAACC,KAAK,GAAG,IAAI;MAEjB,IAAI;QACF;QACA;QACA,MAAMM,QAAQ,GAAG;UACfC,EAAE,EAAE,CAAC;UACLC,QAAQ,EAAEH,WAAW,CAACG,QAAQ;UAC9BC,IAAI,EAAE;QACR,CAAC;QACD,MAAMC,SAAS,GAAG,0BAA0B;QAE5C,IAAI,CAACf,IAAI,GAAGW,QAAQ;QACpB,IAAI,CAACV,KAAK,GAAGc,SAAS;QACtBb,YAAY,CAACc,OAAO,CAAC,OAAO,EAAED,SAAS,CAAC;QAExC,OAAO,IAAI;QACX;;QAEA;QACA;QACA;QACA;QACA;QACA;MACF,CAAC,CAAC,OAAOV,KAAK,EAAE;QACd,IAAI,CAACA,KAAK,GAAG,gBAAgB;QAC7B,OAAO,KAAK;MACd,CAAC,SAAS;QACR,IAAI,CAACD,SAAS,GAAG,KAAK;MACxB;IACF,CAAC;IACDa,MAAMA,CAAA,EAAG;MACP,IAAI,CAACjB,IAAI,GAAG,IAAI;MAChB,IAAI,CAACC,KAAK,GAAG,IAAI;MACjBC,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;IAClC;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}